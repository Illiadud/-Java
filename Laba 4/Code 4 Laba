// Task 1: Find the sum of elements with indices divisible by 3
public class SumIndicesDivisibleByThree {

    public static int findSum(int[] array) {
        if (array == null) {
            throw new NullPointerException("Array cannot be null.");
        }

        int sum = 0;
        for (int i = 0; i < array.length; i++) {
            if (i % 3 == 0) {
                sum += array[i];
            }
        }
        return sum;
    }

    public static void main(String[] args) {
        int[] array1 = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int[] array2 = {10, 20, 30, 40, 50};
        
        System.out.println(findSum(array1)); // Output: 12 (1 + 4 + 7)
        System.out.println(findSum(array2)); // Output: 90 (10 + 40)
        
        try {
            System.out.println(findSum(null)); // Should throw NullPointerException
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}

// Task 2: Find the number of even elements in the array
public class CountEvenElements {

    public static int countEvens(int[] array) {
        if (array == null) {
            throw new NullPointerException("Array cannot be null.");
        }

        int count = 0;
        for (int num : array) {
            if (num % 2 == 0) {
                count++;
            }
        }
        return count;
    }

    public static void main(String[] args) {
        int[] array1 = {1, 2, 3, 4, 5, 6};
        int[] array2 = {10, 15, 20, 25};

        System.out.println(countEvens(array1)); // Output: 3 (2, 4, 6)
        System.out.println(countEvens(array2)); // Output: 2 (10, 20)

        try {
            System.out.println(countEvens(null)); // Should throw NullPointerException
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}

// Task 3: Merge arrays A(n) and B(n) into C(2*n) with interleaving elements
public class MergeArrays {

    public static int[] merge(int[] arrayA, int[] arrayB) {
        if (arrayA == null || arrayB == null) {
            throw new NullPointerException("Arrays cannot be null.");
        }
        if (arrayA.length != arrayB.length) {
            throw new IllegalArgumentException("Arrays must have the same length.");
        }

        int[] mergedArray = new int[arrayA.length * 2];
        int index = 0;
        for (int i = 0; i < arrayA.length; i++) {
            mergedArray[index++] = arrayA[i];
            mergedArray[index++] = arrayB[i];
        }
        return mergedArray;
    }

    public static void main(String[] args) {
        int[] arrayA = {1, 3, 5};
        int[] arrayB = {2, 4, 6};

        int[] merged = merge(arrayA, arrayB);
        for (int num : merged) {
            System.out.print(num + " "); // Output: 1 2 3 4 5 6
        }
        System.out.println();

        try {
            merge(arrayA, null); // Should throw NullPointerException
        } catch (Exception e) {
            System.out.println(e);
        }

        try {
            merge(arrayA, new int[]{1}); // Should throw IllegalArgumentException
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}

